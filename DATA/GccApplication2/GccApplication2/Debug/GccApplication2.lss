
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b2  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000083  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000dd  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000142  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000665  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile unsigned long z = 0;

int main(void)
{
	TCCR0B	|=	(1<<CS00);
  90:	85 b5       	in	r24, 0x25	; 37
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bd       	out	0x25, r24	; 37
	TIMSK0	|=	(1<<TOIE0);
  96:	ee e6       	ldi	r30, 0x6E	; 110
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	TIFR0	|=	(1<<TOV0);
  a0:	a8 9a       	sbi	0x15, 0	; 21
	TCNT0=255;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	86 bd       	out	0x26, r24	; 38
	sei();
  a6:	78 94       	sei
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	87 60       	ori	r24, 0x07	; 7
  ac:	84 b9       	out	0x04, r24	; 4
	
    while(1)
    {
        if(z==10)	{	PORTB ^= (1<<PB0);		}
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	80 91 00 01 	lds	r24, 0x0100
  b4:	90 91 01 01 	lds	r25, 0x0101
  b8:	a0 91 02 01 	lds	r26, 0x0102
  bc:	b0 91 03 01 	lds	r27, 0x0103
  c0:	0a 97       	sbiw	r24, 0x0a	; 10
  c2:	a1 05       	cpc	r26, r1
  c4:	b1 05       	cpc	r27, r1
  c6:	19 f4       	brne	.+6      	; 0xce <main+0x3e>
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	82 27       	eor	r24, r18
  cc:	85 b9       	out	0x05, r24	; 5
		if(z==100)	{	PORTB ^= (1<<PB0);		}
  ce:	80 91 00 01 	lds	r24, 0x0100
  d2:	90 91 01 01 	lds	r25, 0x0101
  d6:	a0 91 02 01 	lds	r26, 0x0102
  da:	b0 91 03 01 	lds	r27, 0x0103
  de:	84 36       	cpi	r24, 0x64	; 100
  e0:	91 05       	cpc	r25, r1
  e2:	a1 05       	cpc	r26, r1
  e4:	b1 05       	cpc	r27, r1
  e6:	19 f4       	brne	.+6      	; 0xee <main+0x5e>
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	82 27       	eor	r24, r18
  ec:	85 b9       	out	0x05, r24	; 5
		if(z==1000)	{	PORTB ^= (1<<PB0);z=0;	}
  ee:	80 91 00 01 	lds	r24, 0x0100
  f2:	90 91 01 01 	lds	r25, 0x0101
  f6:	a0 91 02 01 	lds	r26, 0x0102
  fa:	b0 91 03 01 	lds	r27, 0x0103
  fe:	88 3e       	cpi	r24, 0xE8	; 232
 100:	93 40       	sbci	r25, 0x03	; 3
 102:	a1 05       	cpc	r26, r1
 104:	b1 05       	cpc	r27, r1
 106:	a1 f6       	brne	.-88     	; 0xb0 <main+0x20>
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	82 27       	eor	r24, r18
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	10 92 00 01 	sts	0x0100, r1
 112:	10 92 01 01 	sts	0x0101, r1
 116:	10 92 02 01 	sts	0x0102, r1
 11a:	10 92 03 01 	sts	0x0103, r1
 11e:	c8 cf       	rjmp	.-112    	; 0xb0 <main+0x20>

00000120 <__vector_16>:
    }
}

ISR (TIMER0_OVF_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
	
	z++;
 132:	80 91 00 01 	lds	r24, 0x0100
 136:	90 91 01 01 	lds	r25, 0x0101
 13a:	a0 91 02 01 	lds	r26, 0x0102
 13e:	b0 91 03 01 	lds	r27, 0x0103
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	80 93 00 01 	sts	0x0100, r24
 14c:	90 93 01 01 	sts	0x0101, r25
 150:	a0 93 02 01 	sts	0x0102, r26
 154:	b0 93 03 01 	sts	0x0103, r27
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
