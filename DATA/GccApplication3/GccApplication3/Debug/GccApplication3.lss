
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000ee  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ab  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000142  00000000  00000000  00000395  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000174  00000000  00000000  000004d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a3  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SPI_init>:



void SPI_init(void)
{
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<<PB3) | (1<<PB5) ;	 DDRC |= (1<<PC1)|(1<<PC2);	// Set MOSI , SCK , and SS output
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f 62       	ori	r24, 0x2F	; 47
  94:	84 b9       	out	0x04, r24	; 4
  96:	87 b1       	in	r24, 0x07	; 7
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	87 b9       	out	0x07, r24	; 7
	SPCR = (1<<SPE) | (1<<MSTR);	// Enable SPI, Master, set clock rate fck/128
  9c:	80 e5       	ldi	r24, 0x50	; 80
  9e:	8c bd       	out	0x2c, r24	; 44
  a0:	08 95       	ret

000000a2 <SPI_send>:
}

void SPI_send(uint8_t byte) // sendet daten an SPI out und CLOCKED es kurz zum latchen
{
	PORTC &= ~(1<<PC1);				//LATCH low, ermöglicht SPI transfer zum slave
  a2:	41 98       	cbi	0x08, 1	; 8
	SPDR = byte;					//Load byte to Data register
  a4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); 	// Wait for transmission complete
  a6:	0d b4       	in	r0, 0x2d	; 45
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <SPI_send+0x4>
	PORTC |=  (1<<PC1);
  ac:	41 9a       	sbi	0x08, 1	; 8
	PORTC &= ~(1<<PC1);
  ae:	41 98       	cbi	0x08, 1	; 8
  b0:	08 95       	ret

000000b2 <SPI_receive>:
}

uint8_t  SPI_receive(void)
{	
	PORTC &= ~(1<<PC2);	
  b2:	42 98       	cbi	0x08, 2	; 8
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
  b4:	0d b4       	in	r0, 0x2d	; 45
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <SPI_receive+0x2>
	PORTC |=  (1<<PC2);	
  ba:	42 9a       	sbi	0x08, 2	; 8
	PORTC &= ~(1<<PC2);	
  bc:	42 98       	cbi	0x08, 2	; 8
	/* Return Data Register */
	return SPDR;
  be:	8e b5       	in	r24, 0x2e	; 46
}
  c0:	08 95       	ret

000000c2 <main>:

int main()
{
	
	SPI_init();
  c2:	0e 94 48 00 	call	0x90	; 0x90 <SPI_init>
	
	
	while(1)
	{
		
		a = SPI_receive();
  c6:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_receive>
  ca:	80 93 00 01 	sts	0x0100, r24
		//a = SWITCH_status();
		//SPI_send(c);
		SPI_send(a);
  ce:	80 91 00 01 	lds	r24, 0x0100
  d2:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	85 eb       	ldi	r24, 0xB5	; 181
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x1a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x24>
  e6:	00 00       	nop
  e8:	ee cf       	rjmp	.-36     	; 0xc6 <main+0x4>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
