
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000021c  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000128  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000168  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000193  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000123  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TIMER_init>:
			}
	
void wait(volatile unsigned long time1,volatile unsigned long time2){
	for(int i = 0; i < time1; i++){}
		for(int i = 0; i < time2; i++){}
	}
  90:	e1 eb       	ldi	r30, 0xB1	; 177
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 60       	ori	r24, 0x03	; 3
  98:	80 83       	st	Z, r24
  9a:	e0 e7       	ldi	r30, 0x70	; 112
  9c:	f0 e0       	ldi	r31, 0x00	; 0
void TIMER_init(void)
	{
		
	//TCCR0A = 0b00000000;
	TCCR2B |=  (1<<CS01) | (1<<CS00);//Prescaler von 64
	TIMSK2 |= (1<<TOIE2);//Overflow Interrupt Enable, bei Overflow wird interrupt ausgelöst
  9e:	80 81       	ld	r24, Z
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	80 83       	st	Z, r24
	TCNT2=255; //Timer/Counter Interrupt Register, Timer Overflow Flag gesetzt
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	80 93 b2 00 	sts	0x00B2, r24
	
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <PORT_init>:
	



void PORT_init(void){
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) ;	
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	08 95       	ret

000000b6 <ADC_init>:
void ADC_init(void){
	// A/D Conversion
	//DDRC &= ~((1<<PC0)|(1<<PC1)); //falls ausro werte falsch convertiert

	//ADEN: AD enabed, ADPS2,ADPS1: Prescale (Teilungsverhältnis)
	ADCSRA|= (1<<ADEN)|(1<< ADPS2)|(1<<ADPS1)|(1<<ADLAR);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	86 6a       	ori	r24, 0xA6	; 166
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <main>:
	 return channel;
	}

int main(void)
{	
	PORT_init();
  c2:	0e 94 57 00 	call	0xae	; 0xae <PORT_init>
	ADC_init();
  c6:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_init>
	TIMER_init();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <TIMER_init>
			PORTB ^= (1<<PB0);
			wait(20000,20000);
			*/
				if(i == 10)
					{				
						PORTB ^= (1<<PB2);
  ce:	24 e0       	ldi	r18, 0x04	; 4
			PORTB ^= (1<<PB1);
			wait(20000,20000);
			PORTB ^= (1<<PB0);
			wait(20000,20000);
			*/
				if(i == 10)
  d0:	80 91 00 01 	lds	r24, 0x0100
  d4:	90 91 01 01 	lds	r25, 0x0101
  d8:	0a 97       	sbiw	r24, 0x0a	; 10
  da:	d1 f7       	brne	.-12     	; 0xd0 <main+0xe>
					{				
						PORTB ^= (1<<PB2);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	82 27       	eor	r24, r18
  e0:	85 b9       	out	0x05, r24	; 5
						i=0;
  e2:	10 92 01 01 	sts	0x0101, r1
  e6:	10 92 00 01 	sts	0x0100, r1
  ea:	f2 cf       	rjmp	.-28     	; 0xd0 <main+0xe>

000000ec <__vector_9>:
		
		}        
	}

ISR (TIMER2_OVF_vect)
	{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
			
		i++;
  fa:	80 91 00 01 	lds	r24, 0x0100
  fe:	90 91 01 01 	lds	r25, 0x0101
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	90 93 01 01 	sts	0x0101, r25
 108:	80 93 00 01 	sts	0x0100, r24
				if(ACT > 1)	//1 = grenze vor überlauf
				{ACT = 0;}
			i = 0;
			}
	*/
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
