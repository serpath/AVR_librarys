
MIDI_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  00000192  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000004f  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000116  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ae  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016a  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000cd  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:

int counter = 0;
volatile char kurz = 0;

ISR(USART_RX_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
 	kurz++;
  9e:	80 91 02 01 	lds	r24, 0x0102
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 02 01 	sts	0x0102, r24
char midi_data;
	
   midi_data = UDR0;
  a8:	80 91 c6 00 	lds	r24, 0x00C6
   if(midi_data == 0xF8){
  ac:	88 3f       	cpi	r24, 0xF8	; 248
  ae:	81 f4       	brne	.+32     	; 0xd0 <__vector_18+0x40>
      counter++;
  b0:	80 91 00 01 	lds	r24, 0x0100
  b4:	90 91 01 01 	lds	r25, 0x0101
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 01 01 	sts	0x0101, r25
  be:	80 93 00 01 	sts	0x0100, r24
      if(counter == 5){
         
      }
      if (counter == 24){
  c2:	88 31       	cpi	r24, 0x18	; 24
  c4:	91 05       	cpc	r25, r1
  c6:	21 f4       	brne	.+8      	; 0xd0 <__vector_18+0x40>
         counter = 0;
  c8:	10 92 01 01 	sts	0x0101, r1
  cc:	10 92 00 01 	sts	0x0100, r1
         
      }
   }
   if(kurz ==100){PORTB ^= (1<<PB1); kurz = 0;}
  d0:	80 91 02 01 	lds	r24, 0x0102
  d4:	84 36       	cpi	r24, 0x64	; 100
  d6:	31 f4       	brne	.+12     	; 0xe4 <__vector_18+0x54>
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	89 27       	eor	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
  e0:	10 92 02 01 	sts	0x0102, r1
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <USART_Init>:


void USART_Init(){   
                                          
   UBRR0L=UBRRVAL;                              
  f2:	8f e1       	ldi	r24, 0x1F	; 31
  f4:	80 93 c4 00 	sts	0x00C4, r24
   UBRR0H=(UBRRVAL>>8);                         
  f8:	10 92 c5 00 	sts	0x00C5, r1
   UCSR0C =(1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);   
  fc:	86 e4       	ldi	r24, 0x46	; 70
  fe:	80 93 c2 00 	sts	0x00C2, r24
   UCSR0B =(1<<RXEN0)|(1<<RXCIE0);               
 102:	80 e9       	ldi	r24, 0x90	; 144
 104:	80 93 c1 00 	sts	0x00C1, r24
   sei();                                 
 108:	78 94       	sei
}
 10a:	08 95       	ret

0000010c <main>:
   
int main()
{
   DDRD &= ~(1<<PD0);
 10c:	50 98       	cbi	0x0a, 0	; 10
   
   sei();
 10e:	78 94       	sei


   DDRB = 0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 b9       	out	0x04, r24	; 4
   USART_Init();
 114:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_Init>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0xc>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
