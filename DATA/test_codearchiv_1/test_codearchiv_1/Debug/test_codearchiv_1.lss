
test_codearchiv_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000209  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011f  00000000  00000000  00000415  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b4  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d6  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000128  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ioinit>:
}


void ioinit (void)
{
	DDRD  &= (1<<PD7); //1 = output, 0 = input
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 78       	andi	r24, 0x80	; 128
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD7); //Enable pin 5 internal pullup
  86:	5f 9a       	sbi	0x0b, 7	; 11
	DDRB  |= (1<<PB0);
  88:	20 9a       	sbi	0x04, 0	; 4
  8a:	08 95       	ret

0000008c <led_on>:
}

void led_on(void)
{
	PORTB |= _BV(PB0);
  8c:	28 9a       	sbi	0x05, 0	; 5
  8e:	08 95       	ret

00000090 <led_off>:
}

void led_off(void)
{
	PORTB &= ~_BV(PB0);
  90:	28 98       	cbi	0x05, 0	; 5
  92:	08 95       	ret

00000094 <main>:
void led_off(void);
//======================

int main (void)
{
	ioinit(); //Setup IO pins and defaults
  94:	0e 94 40 00 	call	0x80	; 0x80 <ioinit>
		int num_presses;                  //Number of times button has been iterations
		int num_nopress_iterations;       //Number of loop iterations since last button press
		char button_state;                //1=pressed, 0=not pressed
		
		//Wait for button to be pressed
		while (!bit_is_clear(PIND, 7)) {}
  98:	77 24       	eor	r7, r7
  9a:	73 94       	inc	r7
  9c:	88 24       	eor	r8, r8
  9e:	83 94       	inc	r8
  a0:	91 2c       	mov	r9, r1
			{
				if (button_state==0) //was previously not pressed)
				{
					num_presses++;
				}
				button_state=1;
  a2:	d7 2c       	mov	r13, r7
				if (button_state==1) //was previously pressed
				{
					num_nopress_iterations=0;
				}
				num_nopress_iterations++;
				button_state=0;
  a4:	c1 2c       	mov	r12, r1
			{
				if (button_state==1) //was previously pressed
				{
					num_nopress_iterations=0;
				}
				num_nopress_iterations++;
  a6:	a8 2c       	mov	r10, r8
  a8:	b9 2c       	mov	r11, r9
					break;
				}
			}
		}
		
		for (int i=0;i<num_presses;i++)
  aa:	51 2c       	mov	r5, r1
  ac:	61 2c       	mov	r6, r1
		int num_presses;                  //Number of times button has been iterations
		int num_nopress_iterations;       //Number of loop iterations since last button press
		char button_state;                //1=pressed, 0=not pressed
		
		//Wait for button to be pressed
		while (!bit_is_clear(PIND, 7)) {}
  ae:	4f 99       	sbic	0x09, 7	; 9
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x1a>
  b2:	87 2d       	mov	r24, r7
  b4:	c8 2d       	mov	r28, r8
  b6:	d9 2d       	mov	r29, r9
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <main+0x34>
			{
				if (button_state==0) //was previously not pressed)
				{
					num_presses++;
				}
				button_state=1;
  ba:	8d 2d       	mov	r24, r13
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <main+0x34>
				if (button_state==1) //was previously pressed
				{
					num_nopress_iterations=0;
				}
				num_nopress_iterations++;
				button_state=0;
  be:	8c 2d       	mov	r24, r12
			{
				if (button_state==1) //was previously pressed
				{
					num_nopress_iterations=0;
				}
				num_nopress_iterations++;
  c0:	0a 2d       	mov	r16, r10
  c2:	1b 2d       	mov	r17, r11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <main+0x34>
				button_state=0;
  c6:	8c 2d       	mov	r24, r12
		num_presses=1;
		button_state=1;
		
		while (1)
		{
			if (bit_is_clear(PIND, 7)) //button is pressed
  c8:	4f 99       	sbic	0x09, 7	; 9
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <main+0x42>
			{
				if (button_state==0) //was previously not pressed)
  cc:	81 11       	cpse	r24, r1
  ce:	f5 cf       	rjmp	.-22     	; 0xba <main+0x26>
				{
					num_presses++;
  d0:	21 96       	adiw	r28, 0x01	; 1
				}
				button_state=1;
  d2:	8d 2d       	mov	r24, r13
  d4:	f9 cf       	rjmp	.-14     	; 0xc8 <main+0x34>
			}
			else //button is not pressed
			{
				if (button_state==1) //was previously pressed
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	91 f3       	breq	.-28     	; 0xbe <main+0x2a>
				{
					num_nopress_iterations=0;
				}
				num_nopress_iterations++;
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
				button_state=0;
				if (num_nopress_iterations>20000) //If we haven’t seen a button press for a while, terminate the loop
  de:	01 32       	cpi	r16, 0x21	; 33
  e0:	2e e4       	ldi	r18, 0x4E	; 78
  e2:	12 07       	cpc	r17, r18
  e4:	84 f3       	brlt	.-32     	; 0xc6 <main+0x32>
					break;
				}
			}
		}
		
		for (int i=0;i<num_presses;i++)
  e6:	1c 16       	cp	r1, r28
  e8:	1d 06       	cpc	r1, r29
  ea:	f4 f4       	brge	.+60     	; 0x128 <main+0x94>
  ec:	e5 2c       	mov	r14, r5
  ee:	f6 2c       	mov	r15, r6
		{
			led_on();
  f0:	0e 94 46 00 	call	0x8c	; 0x8c <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	92 e5       	ldi	r25, 0x52	; 82
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x66>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x70>
 104:	00 00       	nop
			_delay_ms(300);
			led_off();
 106:	0e 94 48 00 	call	0x90	; 0x90 <led_off>
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	92 e5       	ldi	r25, 0x52	; 82
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x7c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x86>
 11a:	00 00       	nop
					break;
				}
			}
		}
		
		for (int i=0;i<num_presses;i++)
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	e8 1a       	sub	r14, r24
 120:	f8 0a       	sbc	r15, r24
 122:	ec 16       	cp	r14, r28
 124:	fd 06       	cpc	r15, r29
 126:	21 f7       	brne	.-56     	; 0xf0 <main+0x5c>
			_delay_ms(300);
			led_off();
			_delay_ms(300);
		}
		
		if (bit_is_clear(PINC, 5))
 128:	86 b1       	in	r24, 0x06	; 6
		{
		}
	}
 12a:	c1 cf       	rjmp	.-126    	; 0xae <main+0x1a>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
